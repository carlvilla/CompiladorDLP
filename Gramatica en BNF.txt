programa: elementos {raiz = new Programa($1);}
		;

elementos:   {$$ = new ArrayList<Elemento>();}
		| elementos elemento {$$ = $1; ((List)$1).add($2);}
		;

elemento: funcion {$$ = $1;}
		| struct {$$ = $1;}
		| atributo {$$ = $1;}
		;
			
funcion: 'IDENT' '(' parametrosOpt ')' ':' tipo '{'  atributos sentencias '}' {$$ = new Funcion($1,$3,$6,$8,$9);}
		| 'IDENT' '(' parametrosOpt ')' '{' atributos sentencias '}' {$$ = new Funcion($1,$3,new Tipovoid(),$6,$7);}
		;
		
atributos:	{$$ = new ArrayList<Atributo>();}
		| atributos atributo {$$ = $1; ((List)$1).add($2);}
		;

parametrosOpt: parametros {$$ = $1;}
			|  {$$=new ArrayList<Definicion>();}
			;
	
parametros: definicion {List<Definicion> lista = new ArrayList<Definicion>();((Definicion)$1).setEsParametro(true);lista.add((Definicion)$1);$$ = lista;}
		 | parametros ',' definicion {$$ = $1;((Definicion)$3).setEsParametro(true);((List<Definicion>)$1).add((Definicion)$3);}

tipo: 'IDENT' {$$ = new Tipoident($1);}
	|'INT'	{$$ = new Tipoint();}
	| 'REAL'	{$$ = new Tiporeal();}
	| 'CHAR'	{$$ = new Tipochar();}
	| 'VOID'	{$$ = new Tipovoid();}
	| '[' 'LITERALINT' ']' tipo	{$$ = new Array(new Litent((Integer.valueOf(((Token)$2).getLexeme()))),$4);}
	;
	 
struct: 'STRUCT' 'IDENT' '{' definiciones '}' ';' {$$=new Struct($2,$4);}
	  ;

atributo: 'VAR' definicion ';' {$$=new Atributo($2);}
			;

definiciones:  {$$ = new ArrayList<Definicion>();}
			| definiciones  definicion ';' {$$ = $1; ((List<Definicion>)$1).add((Definicion)$2);}
			;
			
definicion: 'IDENT' ':' tipo {$$ = new Definicion($1,$3);}
			;
			
sentencias: sentencias sentencia {$$ = $1; ((List)$1).add($2);}
			|					{$$ = new ArrayList<Sentencia>();}
			;
			
sentencia:'READ' expresion ';' {$$ = new Read($2);}
		| 'PRINT' expresion ';' {$$ = new Print($2);}
		| 'WHILE' '(' expresion ')' '{' sentencias '}' {$$ = new While($3,$6);}
		| 'IF' '(' expresion ')' '{' sentencias '}' {$$ = new If($3,$6,null);}
		| 'IF' '(' expresion ')' '{' sentencias '}' 'ELSE' '{' sentencias '}' {$$ = new If($3,$6,$10);}
		|  expresion '=' expresion ';' {$$ = new ExpresionBinaria($1,"=",$3);}
		| 'RETURN' expresion ';' {$$ = new Return($2);}
		| 'RETURN' ';' {$$ = new Return($2);}
		| 'IDENT' '(' valoresOpt ')' ';' {$$ = new InvocarSentencia($1,$3);}
		;
		
expresion:'LITERALINT' {$$ = new Litent($1);} 
		| 'LITERALREAL' {$$ = new Litreal($1);}
		| 'LITERALCHAR' {$$ = new Litchar($1);}
		| 'IDENT' {$$ = new Var($1);}
		| expresion '+' expresion {$$ = new ExpresionBinaria($1,"+",$3);}
		| expresion '-' expresion {$$ = new ExpresionBinaria($1,"-",$3);}
		| expresion '/' expresion {$$ = new ExpresionBinaria($1,"/",$3);}
		| expresion '*' expresion {$$ = new ExpresionBinaria($1,"*",$3);}
		| expresion '<' expresion {$$ = new ExpresionBinaria($1,"<",$3);}
		| expresion '>' expresion {$$ = new ExpresionBinaria($1,">",$3);}
		| expresion 'MENORIGUAL' expresion {$$ = new ExpresionBinaria($1,"<=",$3);}
		| expresion 'MAYORIGUAL' expresion {$$ = new ExpresionBinaria($1,">=",$3);}
		| expresion 'IGUAL' expresion {$$ = new ExpresionBinaria($1,"==",$3);}
		| expresion 'DISTINTO' expresion {$$ = new ExpresionBinaria($1,"!=",$3);}
		| expresion 'AND' expresion {$$ = new ExpresionLogica($1,"&&",$3);}
		| expresion 'OR' expresion {$$ = new ExpresionLogica($1,"||",$3);}
		| '!' expresion {$$ = new ExpresionUnaria($2);}
		| 'CAST' '<' tipo '>' '(' expresion ')' {$$=new Cast($3,$6);}
		| '(' expresion ')' {$$ = new EntreParentesis($2);}
		| expresion '[' expresion ']' {$$ = new AccesoArray($1,$3);}
		| expresion '.' 'IDENT' {$$ = new AccesoStruct($1,$3);}
		| 'IDENT' '(' valoresOpt ')' {$$ = new InvocarFuncion($1,$3);}
		;
		
valoresOpt: valores {$$ = $1;}
		|		{$$ = new ArrayList();}
		;
	
valores: expresion {List<Expresion> lista = new ArrayList<Expresion>();lista.add((Expresion)$1);$$ = lista;}
	 | valores ',' expresion {$$ = $1;((List<Expresion>)$1).add((Expresion)$3);}
	 ;
			